# Generated by Django 5.2.5 on 2025-09-19 09:28

from django.db import migrations




def insert_subtests_info_into_database(apps, schema_editor) :

    DiagnosisSubTests = apps.get_model('HospitalApp' , 'DiagnosisSubTests')
    DiagnosisMainTests = apps.get_model('HospitalApp', 'DiagnosisTests')
    
    pathology = [
        ['Complete Blood Count (CBC)', 300],
        ['Hemoglobin (Hb)', 120],
        ['ESR', 150],
        ['CRP', 600],
        ['Blood Sugar (FBS/PPBS/RBS/HbA1c)', 300],
        ['Lipid Profile', 800],
        ['Liver Function Test (LFT)', 800],
        ['Kidney Function Test (KFT/RFT)', 700],
        ['Thyroid Profile (T3, T4, TSH)', 600],
        ['Iron Studies', 900],
        ['Vitamin D', 1500],
        ['Vitamin B12', 1000],
        ['Calcium & Phosphorus', 400],
        ['Urine Routine & Microscopy', 200],
        ['Urine Culture & Sensitivity', 600],
        ['Pregnancy Test (Urine β-hCG)', 200],
        ['Stool Routine & Microscopy', 200],
        ['Stool Occult Blood Test', 300],
        ['Stool Culture', 600],
    ]


    radiology = [
        ['X-Ray (Chest, Abdomen, Limbs)', 400],
        ['Ultrasound Abdomen & Pelvis', 1200],
        ['Obstetric Ultrasound (Pregnancy Scan)', 900],
        ['Doppler Ultrasound', 1800],
        ['CT Scan (Brain/Chest/Abdomen)', 4000],
        ['MRI (Brain/Spine/Joints)', 6000],
        ['Mammography', 1800],
    ]

    cardiology = [
        ['ECG', 200],
        ['2D Echocardiography (ECHO)', 2000],
        ['TMT (Stress Test)', 1800],
        ['Holter Monitoring (24–48 hrs)', 4500],
        ['Blood Pressure & Pulse Oximetry', 100],
    ]


    pulmonology = [
        ['Spirometry', 800],
        ['Peak Expiratory Flow Rate (PEFR)', 300],
        ['Lung Volumes & Capacities', 1500],
        ['Diffusion Capacity Test (DLCO)', 1800],
        ['Arterial Blood Gas (ABG)', 600],
        ['Pulse Oximetry', 100],
        ['Capnography', 1500],
        ['Chest X-Ray', 400],
        ['HRCT Chest', 4500],
        ['CT Pulmonary Angiography', 6000],
    ]


    microbiology = [
        ['HIV Test', 400],
        ['Hepatitis B Surface Antigen (HBsAg)', 400],
        ['Hepatitis C (HCV)', 500],
        ['Widal Test (Typhoid)', 300],
        ['Malaria Antigen / Peripheral Smear', 400],
        ['Dengue (NS1/IgM/IgG)', 600],
        ['Tuberculosis (Mantoux/AFB/GeneXpert)', 800],
        ['COVID-19 RT-PCR', 700],
    ]


    immunology = [
        ['Insulin (Fasting / Postprandial)', 500],
        ['Cortisol (Morning / Evening)', 600],
        ['Testosterone, Progesterone, Estrogen', 700],
        ['Prolactin', 500],
        ['LH, FSH', 700],
    ]


    cancerscreening = [
        ['PSA (Prostate-Specific Antigen)', 600],
        ['CA-125 (Ovarian)', 800],
        ['CEA (Carcinoembryonic Antigen)', 700],
        ['Alpha-fetoprotein (AFP)', 800],
    ]

    healthcheckup = [
        ['Blood Pressure Measurement', 100],  
        ['Height, Weight, BMI (Body Mass Index)', 200],  
        ['Waist-Hip Ratio / Body Fat %', 300],  
        ['Electrocardiogram (ECG)', 500],  
        ['Chest X-ray', 400],  
        ['Ultrasound Abdomen & Pelvis', 1000],  
        ['Vision Test (Eye Check-up)', 300],  
        ['Hearing Test (Audiometry)', 600],  
        ['Dental Check-up (Basic Oral Health)', 500],  
        ['Physical Examination by Doctor (General Check-up)', 800],  
 
    ]


    subtests_lists = [pathology, radiology, cardiology, pulmonology, microbiology, immunology, cancerscreening, healthcheckup]

    main_tests = list(DiagnosisMainTests.objects.all().order_by('id'))

    for idx in range(len(main_tests)) :

        main_test_obj = main_tests[idx]

        subtests_list = subtests_lists[idx]

        for subtest, fee in subtests_list :

            subtest_obj = DiagnosisSubTests(
                maintest = main_test_obj,
                subtest = subtest,
                consultation_fee = fee,
            )

            subtest_obj.save()

class Migration(migrations.Migration):

    dependencies = [
        ('HospitalApp', '0004_insert_diagnosis_maintests_info_into_database'),
    ]

    operations = [
        migrations.RunPython(insert_subtests_info_into_database),
    ]
